/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator;

import java.util.HashMap;
import java.util.Set;
import java.util.function.Consumer;
import nicoLang.FSM;
import nicoLang.FinalState;
import nicoLang.InitState;
import nicoLang.State;
import nicoLang.Transition;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    FSM myFsm = ((FSM) _get);
    fsa.generateFile("State.java", this.generateStateClass());
    final Consumer<State> _function = (State s) -> {
      String _name = s.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, this.genrateStateClass(s));
    };
    myFsm.getState().forEach(_function);
    HashMap<State, State> sourceToTarget = this.getSrcToTarget(myFsm);
    String _name = myFsm.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.genrateMainClass(myFsm, sourceToTarget));
  }
  
  public CharSequence generateStateClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public abstract class State{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean equals (Object o){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if ( o instanceof State){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ((State)o).name == this.name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State(String s){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("name = s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String s){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private String genrateStateClass(final State s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = s.getName();
    _builder.append(_name);
    _builder.append(" extends State  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    String _name_1 = s.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" (){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(\"");
    String _name_2 = s.getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  private HashMap<State, State> getSrcToTarget(final FSM fsm) {
    final HashMap<State, State> result = new HashMap<State, State>();
    final Consumer<Transition> _function = (Transition t) -> {
      result.put(t.getSource(), t.getTarget());
    };
    fsm.getTransition().forEach(_function);
    return result;
  }
  
  private String genrateMainClass(final FSM fsm, final HashMap<State, State> sourceToTarget) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    String _name = fsm.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("static String name = \"");
    String _name_1 = fsm.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("static State initState = new ");
    String _name_2 = this.getInitState(fsm).getName();
    _builder.append(_name_2, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("static State currentState = initState\t;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String [] args){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean isFinished = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(!isFinished){\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch (currentState.name){");
    _builder.newLine();
    {
      Set<State> _keySet = sourceToTarget.keySet();
      for(final State k : _keySet) {
        _builder.append("\t\t\t");
        _builder.append("case \"");
        String _name_3 = k.getName();
        _builder.append(_name_3, "\t\t\t");
        _builder.append("\" : ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("System.out.println(\"go from ");
        String _name_4 = k.getName();
        _builder.append(_name_4, "\t\t\t\t");
        _builder.append(" to ");
        String _name_5 = sourceToTarget.get(k).getName();
        _builder.append(_name_5, "\t\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("currentState = new ");
        String _name_6 = sourceToTarget.get(k).getName();
        _builder.append(_name_6, "\t\t\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = sourceToTarget.get(k).equals(this.getFinalState(fsm));
          if (_equals) {
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("isFinished = true;");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("System.out.println(\"final state reached, stop loop\");");
            _builder.newLine();
          }
        }
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public State getInitState(final FSM fsm) {
    final Function1<State, Boolean> _function = (State s) -> {
      return Boolean.valueOf((s instanceof InitState));
    };
    return IterableExtensions.<State>findFirst(fsm.getState(), _function);
  }
  
  public State getFinalState(final FSM fsm) {
    final Function1<State, Boolean> _function = (State s) -> {
      return Boolean.valueOf((s instanceof FinalState));
    };
    return IterableExtensions.<State>findFirst(fsm.getState(), _function);
  }
}

/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import nicoLang.FSM
import java.util.HashMap

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var myFsm = resource.contents.get(0) as FSM
		myFsm.state.forEach[s | fsa.generateFile(s.name + '.java', genrateStateClass(s))]
		var sourceToTarget = getSrcToTarget(myFsm);
		fsa.generateFile("Main.java", genrateMainClass(myFsm,sourceToTarget));
	}
	
	def private String genrateStateClass (nicoLang.State s){
		'''
		public class « s.name» {
			String name = "« s.name»" ;
		}
		'''
	}
	
	def private HashMap<String,String> getSrcToTarget(FSM fsm){
		val result = new HashMap<String, String >()
		fsm.transition.forEach[t | result.put(t.source.name , t.target.name)]
		return result
	}
	
	def private String genrateMainClass (FSM fsm, HashMap<String, String> sourceToTarget){
		'''
		public class « fsm.name» {
			String name = « fsm.name» ;
			String initState = « fsm.state.get(0).name»;
			State current = initState ;
			public static void main(String [] args){
				while(true){					
					switch (currenState){
					«FOR k : sourceToTarget.keySet()»
						case « k» : 
							System.out.println("go from " + «k» + " to " + sourceToTarget.get(« k»));
							currentState = sourceToTarget.get(« k»);
							break;
					«ENDFOR»
					}
				}
			}
		}
		'''
	}
}

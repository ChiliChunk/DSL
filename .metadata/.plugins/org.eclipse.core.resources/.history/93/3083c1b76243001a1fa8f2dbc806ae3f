/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import nicoLang.FSM
import java.util.HashMap
import nicoLang.InitState
import nicoLang.FinalState
import nicoLang.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var myFsm = resource.contents.get(0) as FSM
		myFsm.state.forEach[s | fsa.generateFile(s.name + '.java', genrateStateClass(s))]
		var sourceToTarget = getSrcToTarget(myFsm);
		fsa.generateFile(myFsm.name + ".java", genrateMainClass(myFsm,sourceToTarget));
	}
	
	def private String genrateStateClass (nicoLang.State s){
		'''
		public class « s.name» {
			String name = "« s.name»" ;
		}
		'''
	}
	
	def private HashMap<State,State> getSrcToTarget(FSM fsm){
		val result = new HashMap<State, State>()
		fsm.transition.forEach[t | result.put(t.source.name , t.target.name)]
		return result
	}
	
	def private String genrateMainClass (FSM fsm, HashMap<String, String> sourceToTarget){
		'''
		public class « fsm.name» {
			static String name = "« fsm.name»" ;
			static String initState = "« getInitState(fsm).name	»";
			static String currentState = initState	;
			public static void main(String [] args){
				boolean isFinished = false;
				while(!isFinished){					
					switch (currentState){
					«FOR k : sourceToTarget.keySet()»
						case "« k»" : 
							System.out.println("go from «k» to « sourceToTarget.get(k)»");
							currentState = "« sourceToTarget.get(k)»";
							« IF sourceToTarget.get(k) == getFinalState(fsm).name»
								isFinished = true;
								System.out.println("final state reached, stop loop");
							«ENDIF »
							break;
					«ENDFOR»
					}
				}
			}
		}
		'''
	}
		
		def getInitState(FSM fsm) {
			return fsm.state.findFirst[s | s instanceof InitState]
		}
		
		
		def getFinalState(FSM fsm) {
			return fsm.state.findFirst[s | s instanceof FinalState]
		}
		
}
